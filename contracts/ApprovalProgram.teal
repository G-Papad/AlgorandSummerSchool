#pragma version 8
txn ApplicationID
pushint 0
==

pushbytes "ADMIN"
txn Sender
app_global_put

bz main_0

int 1
return


main_0:
pushint 1 //Opt in
txn OnCompletion
==
txn NumAppArgs
int 0
==
&&
bz main_1
int 1
return


main_1:
pushbytes "setup"
txna ApplicationArgs 0
==
bnz setup

pushbytes "addMonster"
txna ApplicationArgs 0
==
bnz addMonster

pushbytes "enterPlayer"
txna ApplicationArgs 0
==
bnz enterPlayer

pushbytes "playerMove"
txna ApplicationArgs 0
==
bnz playerMove

pushbytes "exitAndSavePlayer"
txna ApplicationArgs 0
==
bnz exitAndSavePlayer

pushbytes "pvpSteal"
txna ApplicationArgs 0
==
bnz pvpSteal

pushbytes "playerKillMonster"
txna ApplicationArgs 0
==
bnz playerKillMonster

pushbytes "secureAsset"
txna ApplicationArgs 0
==
bnz secureAsset


err


setup:
txn Sender
pushbytes "ADMIN"
app_global_get
==
assert

pushbytes "MONSTERS"
pushint 4096
box_create

int 1
return




addMonster:
//append monster to monsters box

// ApplicationArgs 1 is X
// ApplicationArgs 2 is Y
// ApplicationArgs 3 is ASA_id

pushbytes "MONSTERS"
int 0
int 8
box_extract //[box_length (first 8 bytes)]
btoi //[box_length (uint64)]

pushbytes "MONSTERS" //[box_length (uint64), "MONSTERS"]
dig 1 //[box_length (uint64), "MONSTERS", box_length (uint64)]
int 24
* //[box_length (uint64), "MONSTERS", position_of_X (uint64)]
int 8
+
swap
dig 1 //[box_length (uint64), position_of_X (uint64), "MONSTERS", position_of_X (uint64)]
txna ApplicationArgs 1 //[box_length (uint64), position_of_X (uint64), "MONSTERS", position_of_X (uint64), X]
box_replace //[box_length (uint64), position_of_X (uint64)]
int 8
+
dup
pushbytes "MONSTERS"
swap
txna ApplicationArgs 2
box_replace
int 8
+
pushbytes "MONSTERS"
swap
//txna ApplicationArgs 3 //that's must change-> mint NFT
//mint NFT
itxn_begin

int acfg
itxn_field TypeEnum
byte "MONSTER_ASA_ID"
itxn_field ConfigAssetName
int 1
itxn_field ConfigAssetTotal
global CurrentApplicationAddress
dupn 2
itxn_field ConfigAssetManager
itxn_field ConfigAssetFreeze
itxn_field ConfigAssetClawback
itxn_submit
itxn CreatedAssetID
itob
box_replace //[box_length]
int 1
+
pushbytes "MONSTERS"
swap
int 0
swap
itob
box_replace

int 1
return



enterPlayer:
//if player is not opted in, don't let them enter the game
txn Sender
global CurrentApplicationID
app_opted_in
assert

//check if player is starting a new game or returning
txn Sender
box_get
bnz boxExists

//player does not exist!
pop //pop empty byte array

newGame:

txn Sender
int 32
box_create

txn Sender
pushbytes "POS_X"
int 0
app_local_put

txn Sender
pushbytes "POS_Y"
int 0
app_local_put

txn Sender
pushbytes "UNSECURED_ASSET"
int 0
app_local_put

txn Sender
pushbytes "SCORE"
int 1
app_local_put

b end

boxExists:   //[boxData(address, lat, long, score, unsecured_asset)]
//retrieve score and unsecured asset, and set them to 0

reinstate:
dup
int 0
extract_uint64
txn Sender
pushbytes "POS_X"
dig 2
app_local_put
pop

dup
int 8
extract_uint64
txn Sender
pushbytes "POS_Y"
dig 2
app_local_put
pop

dup                      //[...boxData, boxData]
int 16                   //[...boxData, boxData, 74]
extract_uint64           //[...boxData, score]
txn Sender               //[...boxData, score, senderAddr]
pushbytes "UNSECURED_ASSET"        //[...boxData, score, senderAddr, "SCORE"]
dig 2                    //[...boxData, score, senderAddr, "SCORE", score]
app_local_put            //[...boxData, score]
pop                      //[boxData]

dup                      //[boxData, boxData]
int 24                   //[...boxData, boxData, 82]
extract_uint64           //[...boxData, unsecured_asset]
txn Sender               //[...boxData, unsecured_asset, senderAddr]
pushbytes "SCORE" //[...boxData, unsecured_asset, senderAddr, "UNSECURED_ASSET"]
dig 2                    //[...boxData, unsecured_asset, senderAddr, "UNSECURED_ASSET", unsecured_asset]
app_local_put            //[...boxData, unsecured_asset]
pop                      //[...boxData]

//clear save box
txn Sender
pushbytes 0x0000000000000000000000000000000000000000000000000000000000000000
box_put

end:
int 1
return




exitAndSavePlayer:
//save the player's state before quitting

//check if player is active
txn Sender
pushbytes "SCORE"
app_local_get
int 0
!=
assert

//add a player's local data into their respective box
//push POS_X
txn Sender
dup
dup
pushbytes "POS_X"
app_local_get  //[address, address, local_pos_x]
int 0 
swap //[address, address, 0, local_pos_x]
itob
box_replace //[address]

//push POS_Y
dup
dup
pushbytes "POS_Y"
app_local_get  //[address, address, local_pos_y]
int 8 
swap //[address, address, 8, local_pos_y]
itob
box_replace //[address]

//push UNSECURED_ASSET
dup
dup
pushbytes "UNSECURED_ASSET"
app_local_get  //[address, address, local_pos_UNSECURED_ASSET]
int 16
swap //[address, address, 16, local_pos_UNSECURED_ASSET]
itob
box_replace //[address]

//push SCORE
dup
pushbytes "SCORE"
app_local_get
int 24
swap
itob
box_replace

//clear state program
txn Sender
pushbytes "POS_X"
int 0
app_local_put

txn Sender
pushbytes "POS_Y"
int 0
app_local_put

txn Sender
pushbytes "SCORE"
int 0
app_local_put

txn Sender
pushbytes "UNSECURED_ASSET"
int 0
app_local_put

int 1
return




playerMove:
//allow the player to move through the map

//check if player is active
txn Sender
pushbytes "SCORE"
app_local_get
int 0
!=
assert

txn Sender
txna ApplicationArgs 1
pushbytes "UP"
==
bnz up
txna ApplicationArgs 1
pushbytes "DOWN"
==
bnz down
txna ApplicationArgs 1
pushbytes "RIGHT"
==
bnz right
txna ApplicationArgs 1
pushbytes "LEFT"
==
bnz left

int 0
return

up:
pushbytes "POS_Y"
app_local_get
int 1
+
txn Sender
swap
pushbytes "POS_Y"
swap
app_local_put
b exit

down:
pushbytes "POS_Y"
app_local_get
int 1
-
//check if the Ypos was 0
//dup
//int 0
//>=
//assert
txn Sender
swap
pushbytes "POS_Y"
swap
app_local_put
b exit

right:
pushbytes "POS_X"
app_local_get
int 1
+
txn Sender
swap
pushbytes "POS_X"
swap
app_local_put
b exit

left:
pushbytes "POS_X"
app_local_get
int 1
-
//check if the Xpos was 0
//dup
//int 0
//>=
//assert
txn Sender
swap
pushbytes "POS_X"
swap
app_local_put
b exit

exit:
int 1
return



playerKillMonster:
//allow player to kill monsters, erasing them from the array
    //and rewarding the player with an NFT
//check if your hands are full dummy
txn Sender
pushbytes "UNSECURED_ASSET"
app_local_get
int 0
==
assert

txna Assets 0
//findMonster [monsterASAID]
callsub findMonsterIndex  //[..,index_of_monster]
pushbytes "MONSTERS"
box_get //[index_of_monster, mbox]
pop
dup //[index_of_monster, mbox, mbox]
dig 2 //[index_of_monster, mbox, mbox, index_of_monster]
extract_uint64 //[index_of_monster, mbox, POS_X]
dig 1 //[index_of_monster, mbox, POS_X, mbox]
dig 3 //[index_of_monster, mbox, POS_X, mbox, index_of_monster]
int 8
+   //[index_of_monster, mbox, POS_X, mbox, index_of_monster+8]
extract_uint64 //[index_of_monster, mbox, POS_X, POS_Y]
dig 2
dig 4
int 16
+
extract_uint64 //[index_of_monster, mbox, POS_X, POS_Y, ASA_ID]
pushbytes "MONSTERS"
dig 5
byte 0x000000000000000000000000000000000000000000000000
box_replace

//fill the box with the last monster
dig 3
int 0
extract_uint64 //[index_of_monster, mbox, POS_X, POS_Y, ASA_ID, len]
int 1 
-
int 24
*
int 8
+ //[index_of_monster, mbox, POS_X, POS_Y, ASA_ID, pos_of_last_monster]
dig 4
dig 1
extract_uint64 //[index_of_monster, mbox, POS_X, POS_Y, ASA_ID, pos_of_last_monster, LM_POS_X]
dig 5
dig 2
int 8
+
extract_uint64 //[index_of_monster, mbox, POS_X, POS_Y, ASA_ID, pos_of_last_monster, LM_POS_X, LM_POS_Y]
dig 6
dig 3
int 16
+
extract_uint64 //[index_of_monster, mbox, POS_X, POS_Y, ASA_ID, pos_of_last_monster, LM_POS_X, LM_POS_Y, LM_ASA_ID]
pushbytes "MONSTERS"
dig 9 //[index_of_monster, mbox, POS_X, POS_Y, ASA_ID, pos_of_last_monster, LM_POS_X, LM_POS_Y, LM_ASA_ID, "MONSTERS", index_of_monster]
dig 4 //[index_of_monster, mbox, POS_X, POS_Y, ASA_ID, pos_of_last_monster, LM_POS_X, LM_POS_Y, LM_ASA_ID, "MONSTERS", index_of_monster, LM_POS_X]
itob
box_replace
//dig 7
pushbytes "MONSTERS"
dig 9
int 8
+
dig 3
itob
box_replace
//dig 7
pushbytes "MONSTERS"
dig 9
int 16
+
dig 2
itob
box_replace
pop
pop
pop //[index_of_monster, mbox, POS_X, POS_Y, ASA_ID, pos_of_last_monster]

dig 4 //[index_of_monster, mbox, POS_X, POS_Y, ASA_ID, pos_of_last_monster, mbox]
int 0
extract_uint64
int 1
-
//dig 5
pushbytes "MONSTERS"
swap
int 0
swap
itob
box_replace //[index_of_monster, mbox, POS_X, POS_Y, ASA_ID, pos_of_last_monster]
pop //[index_of_monster, mbox, POS_X, POS_Y, ASA_ID]
txn Sender
pushbytes "UNSECURED_ASSET"
dig 2
app_local_put //[index_of_monster, mbox, POS_X, POS_Y, ASA_ID]

itxn_begin //xfer->type

int axfer
itxn_field TypeEnum
itxn_field XferAsset //[index_of_monster, mbox, POS_X, POS_Y]
txn Sender
itxn_field AssetReceiver
int 1
itxn_field AssetAmount
itxn_submit

txn Sender
pushbytes "SCORE"
app_local_get
int 1
+
txn Sender
pushbytes "SCORE"
dig 2
app_local_put
pop

int 1
return

pvpSteal:
//allow player to steal from another player holding an unsecured asset
//check if caller has already full hands
txn Sender
pushbytes "UNSECURED_ASSET"
app_local_get
int 0
==
assert //[]

//find the first available Account
txna Accounts 0
pushbytes "SCORE"
app_local_get
int 0
!=
assert
txn Sender
pushbytes "SCORE"
app_local_get
int 0
!=
assert //[]

//check if the distance between the players is at most 10 units
txna Accounts 0 //[address_of_first_account]
dup //[address_of_first_account, address_of_first_account]
pushbytes "POS_X"
app_local_get //[address_of_first_account, A0_posX]
dig 1 //[address_of_first_account, A0_posX, address_of_first_account]
pushbytes "POS_Y"
app_local_get //[address_of_first_account, A0_posX, A0_posY]
txn Sender
dup
pushbytes "POS_X"
app_local_get //[address_of_first_account, A0_posX, A0_posY, address_of_sender, S_posX]
swap
pushbytes "POS_Y"
app_local_get //[address_of_first_account, A0_posX, A0_posY, S_posX, S_posY]
int 100
callsub checkDistInRange //[address_of_first_account, A0_posX, A0_posY, S_posX, S_posY, distance?] 
int 1
==
assert //[address_of_first_account, A0_posX, A0_posY, S_posX, S_posY] 


//change local variables
pop
pop
pop
pop //[address_of_first_account]
dup
pushbytes "UNSECURED_ASSET"
app_local_get //[address_of_first_account, A0_UA]
swap
pushbytes "UNSECURED_ASSET"
int 0
app_global_put //[A0_UA]
dup //[A0_UA, A0_UA]
txn Sender 
swap //[A0_UA, Sender, A0_UA]
pushbytes "UNSECURED_ASSET"
swap //[A0_UA, Sender, "UNSECURED_ASSET", A0_UA]
app_local_put //[A0_UA]

//inner transaction ?? how to take as sender the Account 0
itxn_begin //xfer->type

int axfer
itxn_field TypeEnum
itxn_field XferAsset //[]
txna Accounts 0
itxn_field AssetSender
txn Sender
itxn_field AssetReceiver
itxn_submit

int 1 
return



secureAsset:
//allow player to secure an asset being held, iff they are inside the safe zone

//check if player is active
txn Sender
pushbytes "SCORE"
app_local_get
int 0
!=
assert //[]

//check that player has an asset to store
txn Sender
pushbytes "UNSECURED_ASSET"
app_local_get
int 0
!=
assert //[]

//check if the player is in secure area
txn Sender
dup //[addr,addr]
pushbytes "POS_X"
app_local_get //[addr,posX]
swap
pushbytes "POS_Y"
app_local_get //[posX, posY]
int 10 //[posX, posY, 10]
<=
int 1
assert
int 10
<=
int 1
assert

//store (just claer out the local variable? -> the player gets their local state variable cleared out, and their asset is safe)
txn Sender
pushbytes "UNSECURED_ASSET"
int 0
app_local_put

//score increase
txn Sender
pushbytes "SCORE"
app_local_get //[Score]
int 1
+   //[Score+1]
txn Sender //[Score+1, Sender]
pushbytes "SCORE"
dig 2 //[Score+1, Sender, SCORE, Score+1]
app_local_put
pop //[]

int 1
return


//Subroutines:
//find monster by ASA index (reject program if not found)
findMonsterIndex:        //[monsterASAId]
int 8
store 1

//store monster array length in scratch space 2
callsub getMonsterLen
int 24
*
int 8
+
store 2

monsterSearchLoop:
dup                     //[monsterASAId, monsterASAId]
load 1                  //[monsterASAId, monsterASAId, i]
int 16                  
+                       //[monsterASAId, monsterASAId, i+16]

byte "MONSTERS"         //[monsterASAId, monsterASAId, i+16, b"MONSTERS"]
swap                    //[monsterASAId, monsterASAId, b"MONSTERS", i+16]
int 8                   //[monsterASAId, monsterASAId, b"MONSTERS", i+16, 8]
box_extract             //[monsterASAId, monsterASAId, boxASAId]
btoi                    //[monsterASAId, monsterASAId, boxASAId]
==
bnz found

load 1                     //[monsterASAId, i]
int 24
+                       //[monsterASAId, i=i+24]
store 1                 //[monsterASAId]

load 1
load 2                  //[monsterASAId, i, len]
<
assert

b monsterSearchLoop 

found:
pop
load 1
retsub


//check if distance between point a and point b is <= r (argument passed is r**2)
checkDistInRange:           //[a_x, a_y, b_x, b_y, r**2] 
dig 1                       //[a_x, a_y, b_x, b_y, r**2, b_y]
dup                         //[a_x, a_y, b_x, b_y, r**2, b_y, b_y]
*                           //[a_x, a_y, b_x, b_y, r**2, b_y^2]
dig 3
dup
*                           //[a_x, a_y, b_x, b_y, r**2, b_y^2, b_x^2]
+                           //[a_x, a_y, b_x, b_y, r**2, b_y^2 + b_x^2]
dig 4                       //[a_x, a_y, b_x, b_y, r**2, b_y^2 + b_x^2, a_y]
dup                         //[a_x, a_y, b_x, b_y, r**2, b_y^2 + b_x^2, a_y, a_y]
*                           //[a_x, a_y, b_x, b_y, r**2, b_y^2 + b_x^2, a_y^2]
+                           //[a_x, a_y, b_x, b_y, r**2, b_y^2 + b_x^2 + a_y^2]
dig 5                       //[a_x, a_y, b_x, b_y, r**2, b_y^2 + b_x^2 + a_y^2, a_x]
dup                         //[a_x, a_y, b_x, b_y, r**2, b_y^2 + b_x^2 + a_y^2, a_x, a_x]
*                           //[a_x, a_y, b_x, b_y, r**2, b_y^2 + b_x^2 + a_y^2, a_x^2]
+                           //[a_x, a_y, b_x, b_y, r**2, b_y^2 + b_x^2 + a_y^2 + a_x^2]
swap                        //[a_x, a_y, b_x, b_y, b_y^2 + b_x^2 + a_y^2 + a_x^2, r**2]
dig 2                       //[a_x, a_y, b_x, b_y, b_y^2 + b_x^2 + a_y^2 + a_x^2, r**2, b_y]
dig 5                       //[a_x, a_y, b_x, b_y, b_y^2 + b_x^2 + a_y^2 + a_x^2, r**2, b_y, a_y]
*
int 2
*                           //[a_x, a_y, b_x, b_y, b_y^2 + b_x^2 + a_y^2 + a_x^2, r**2, 2*b_y*a_y]
+                           //[a_x, a_y, b_x, b_y, b_y^2 + b_x^2 + a_y^2 + a_x^2, r**2 + 2*b_y*a_y]                 
dig 3                       //[a_x, a_y, b_x, b_y, b_y^2 + b_x^2 + a_y^2 + a_x^2, r**2 + 2*b_y*a_y, b_x]                 
dig 6                       //[a_x, a_y, b_x, b_y, b_y^2 + b_x^2 + a_y^2 + a_x^2, r**2 + 2*b_y*a_y, b_x, a_x]
*
int 2
*
+                           //[a_x, a_y, b_x, b_y, b_y^2 + b_x^2 + a_y^2 + a_x^2, r**2 + 2*b_y*a_y + 2*b_x*a_x]
<=                          //[a_x, a_y, b_x, b_y, b_y^2 + b_x^2 + a_y^2 + a_x^2 <= r**2 + 2*b_y*a_y + 2*b_x*a_x]

retsub

getMonsterLen:
pushbytes "MONSTERS"
box_get //[mbox]
pop //put assert better
int 0
extract_uint64
retsub
